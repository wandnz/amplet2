/**
 * Data reporting messages for the AMP throughput test.
 *
 * This test measures TCP throughput between two AMP monitors. It can run a
 * small schedule of tests in either/both directions, of varying durations.
 *
 * Each message contains one Report.
 * Each Report contains one Header and one Item per result.
 * Each Item contains information on a test result.
 */
syntax = "proto2";
package amplet2.throughput;

enum Protocol {
    NONE = 0;
    HTTP_POST = 1;
}


/**
 * An instance of the test will generate one Report message.
 */
message Report {
    /** Describes the test settings used in this test instance */
    optional Header header = 1;
    /** Results for all test targets */
    repeated Item reports = 2;
}


/**
 * The test header describes all of the settings that the test was configured
 * to run with. These settings are the same for every result contained within
 * the Report message.
 */
message Header {
    /** The address that was tested to */
    optional bytes address = 1;
    /** The family the tested address belongs to (AF_INET/AF_INET6) */
    optional int32 family = 2;
    /** The test schedule string used for this test */
    optional string schedule = 3;
    /** The write size in bytes used for this test */
    optional uint32 write_size = 4;
    /** The name of the test target (as given in the schedule) */
    optional string name = 5;
    /** Differentiated Services Code Point (DSCP) used */
    optional uint32 dscp = 6 [default = 0];
    /** Protocol that the throughput test appeared as */
    optional Protocol protocol = 7 [default = NONE];
}


/**
 * A report will be generated for each item in the test schedule, describing
 * how much data was transferred and how long it took.
 */
message Item {
    /** Duration that this test ran, measured in nanoseconds */
    optional uint64 duration = 1;
    /** The number of bytes transferred during the test */
    optional uint64 bytes = 2;
    /**
     * The direction of the data flow during the test. Each test is performed
     * in one direction only, either from the server to the client or from the
     * client to the server.
     */
    enum Direction {
        NULL = 0;
        SERVER_TO_CLIENT = 1;
        CLIENT_TO_SERVER = 2;
    }
    /** The direction of the data flow during the test */
    optional Direction direction = 3;
    /** Extra TCP information that may not be available on all hosts */
    optional TCPInfo tcpinfo = 4;
}


/**
 * Extra information that was extracted from the tcp_info struct. Only really
 * interesting in kernels >= 4.10, will otherwise be left empty.
 */
message TCPInfo {
    /** Highest goodput measurement (Bps) if app limited, otherwise zero */
    optional uint64 delivery_rate = 1;
    /** Total count of retransmitted packets sent */
    optional uint32 total_retrans = 2;
    /** Smoothed round trip time (usec) */
    optional uint32 rtt = 3;
    /** Round trip time variance (usec) */
    optional uint32 rttvar = 4;
    /** Time (usec) busy sending data */
    optional uint64 busy_time = 5;
    /** Time (usec) limited by receive window */
    optional uint64 rwnd_limited = 6;
    /** Time (usec) limited by send buffer */
    optional uint64 sndbuf_limited = 7;
    /* Minimum round trip time (usec) */
    optional uint32 min_rtt = 8;
    /**
     * Type of congestion inferred from rtt timmings.
     * Special cases for NULL if not measured
     * TOO_HEALTHY for no packets dropped in range
     * UNHEALTHY if packets dropped too soon
     */
    enum Congestion_Type {
        NULL = 0;
        SELF = 1;
        EXTERNAL = 2;
        TOO_HEALTHY = 3;
        UNHEALTHY = 4;
    }
    optional Congestion_Type congestion_type = 9;
}


/**
 * @exclude
 */
message Hello {
    /*
    extend amplet2.servers.Hello {
        optional Hello data = 106;
    }
    */

    optional uint32 test_port = 1;
    optional uint32 mss = 2;
    optional int32 rcvbuf = 3;
    optional int32 sndbuf = 4;
    optional bool disable_nagle = 5;
    optional bool disable_web10g = 6;
    optional bool randomise = 7;
    optional bool reuse_addr = 8;
    optional uint32 write_size = 9;
    optional uint32 dscp = 10;
    optional Protocol protocol = 11;
}


/**
 * @exclude
 */
message Send {
    /*
    extend amplet2.servers.Send {
        optional Send data = 106;
    }
    */

    optional uint32 duration = 1;
    optional uint32 write_size = 2;
    optional uint64 bytes = 3;
}
